Problem Statement :

    Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 

    Find all unique triplets in the array which gives the sum of zero.

    Note:

        Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

        The solution set must not contain duplicate triplets.

        For example, given array S = {-1 0 1 2 -1 -4},

        A solution set is:

          (-1, 0, 1)

          (-1, -1, 2)
          
          
Solution :

vector<vector<int> > Solution::threeSum(vector<int> &A) {
    sort(A.begin(), A.end());
    
    map<vector<int>, int> mp;
    vector<vector<int> > ans;

    int i, j, n = A.size();

    for(int k = 0; k < n-2; k++){
        i = k+1;
        j = n-1;
        while(i < j){
            long long x = (long long)A[i] + (long long)A[j] + (long long)A[k];
            if(x == 0){
                if(mp[{A[k], A[i], A[j]}] == 0){
                    mp[{A[k], A[i], A[j]}]++;
                    ans.push_back({A[k], A[i], A[j]});
                }
                i++;
                j--;
            }
            else if(x < 0){
                i++;
            }
            else{
                j--;
            }
        }
    }

    return ans;
}
